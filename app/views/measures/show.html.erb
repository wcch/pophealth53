<% content_for :head do %>
  <script type="text/javascript">
    function llog(x) {}
    var popHealth = popHealth || {};
    popHealth.drawPctChart = function(data) {
        data = data[0]
        var elem = "#measureMetrics";
        var percent = data.denominator > 0 ? Math.floor((data.numerator/data.denominator)*100) : 0;
        var numeratorWidth = (data.numerator/<%= @patient_count -%>).toFixed(2)*100;
        var denominatorWidth = data.denominator > 0 ? ((data.denominator - data.numerator)/<%= @patient_count -%>).toFixed(2)*100 : 0;
        $(elem).find(".numeratorValue").text(data.numerator);
        $(elem).find(".denominatorValue").text(data.denominator);
        $(elem).find("#measurePopulationPercentage").text(percent + "%");
        $("#eligibleCount").text(data.denominator);
        $("#outcomeCount").text(data.numerator);
        $("#exclusionCount").text(data.exclusions);
    }

    popHealth.textForUnit = function(value, temporal, plural) {
      decoder = {'a':'year','mo':'month','wk':'week','d':'day','h':'hour','min':'minute','s':'second'};
      if(temporal) value = decoder[value];
      if(temporal && plural) value += 's';
      return value;
    }

    popHealth.textForValue = function(value, temporal) {
      return (value['inclusive?'] ? '=' : '') + " " + value.value + (value.unit != null ? ' ' + popHealth.textForUnit(value.unit,temporal,value.value>1) +' ' : '')
    }

    popHealth.humanizeCategory = function(catagory) {
      return catagory.replace(/_/g,' ');
    }
    popHealth.textForRange = function(range, temporal) {
      if ((range.high != null) && (range.low != null)) {
        if (range.high.value === range.low.value && range.high['inclusive?'] && range.low['inclusive?'])
          return "=" + range.low.value;
        else
          return ">" + popHealth.textForValue(range.low,temporal) + " and <" + popHealth.textForValue(range.high,temporal);
      } else {
        if (range.high != null) 
          return "<" + popHealth.textForValue(range.high,temporal);
        if (range.low != null) 
          return ">" + popHealth.textForValue(range.low,temporal);
        if (range.value != null)
          return "=" + range.value;
        return '';
      }
    }

    popHealth.renderMeasureJSON = function(data) {
        var measure = data;
        var elemParent;
        var addParamItems = function(obj,elemParent,container) {
          var conjunction, obj, items, subset_operator, _i, _len, _ref;
          items = obj["items"];
          if ((obj.title != null)) {
            if ((obj.subset_operators != null)) {
              _ref = obj.subset_operators;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                subset_operator = _ref[_i];
                $(elemParent).append("<span class='" + subset_operator.type + "'>" +
                (
                  subset_operator.type + ' ' +
                  (
                    subset_operator.value ? popHealth.textForRange(subset_operator.value, false) : ''
                  ) +
                  ' of'
                )
                + "</span>"
                );
              }
            }
            if ((obj.children_criteria != null)) {
              items = [];
              if (obj.children_criteria.length > 0){
                conjunction = obj.derivation_operator == 'XPRODUCT' ? 'and' : 'or';
                items.push({'conjunction': conjunction, 'items': obj.children_criteria, 'negation':null})
              }
            } else {
              if (obj.temporal_references) {
                items = $.map(obj.temporal_references,
                  function(temporal_reference){
                    return {
                      conjunction: temporal_reference.type,
                      items: [temporal_reference.reference],
                      temporal: true,
                      title: (
                        (
                          temporal_reference.range ? popHealth.textForRange(temporal_reference.range,true) : ''
                        ) +
                        ({
                          DURING:'During',SBS:'Starts Before Start of',SAS:'Starts After Start of',SBE:'Starts Before End of',
                          SAE:'Starts After End of',EBS:'Ends Before Start of',EAS:'Ends After Start of',EBE:'Ends Before End of',
                          EAE:'Ends After End of',SDU:'Starts During',EDU:'Ends During',ECW:'Ends Concurrent with',
                          SCW:'Starts Concurrent with',CONCURRENT:'Concurrent with'
                        })[temporal_reference.type] +
                        (temporal_reference.reference == 'MeasurePeriod' ? ' Measure Period' : '')
                      )
                    }
                  }
                );
              }
              if (!obj.temporal){
                elemParent = $("#ph_tmpl_paramGroup").tmpl().appendTo(elemParent).find(".paramItem:last");
                $('#ph_tmpl_data_criteria_logic').tmpl(obj).appendTo(elemParent);
              }
            }
          }
          var neg = obj.negation || false;
          if ($.isArray(items)) {
            conjunction = obj['conjunction'];
            if (items.length > 1 && !(container != null)) {
              elemParent = $('#ph_tmpl_paramGroup').tmpl().appendTo(elemParent).find(".paramItem:last");
            }
            if (neg) {
              $(elemParent).append("<span class='not'>not</span>");
            }
            return $.each(items, function(i, node) {
              var next;
              if (node.temporal) {
                $(elemParent).append("<span class='" + node.conjunction + "'>" + node.title + "</span>");
              }
              addParamItems(node, elemParent);
              if (i < items.length - 1 && !node.temporal) {
                next = items[i + 1];
                if (!conjunction) {
                  conjunction = node.conjunction;
                }
                return $(elemParent).append("<span class='" + conjunction + "'>" + conjunction + "</span>");
              }
            });
          };
        } // end addParamItems

        if (data.population) {
          elemParent = $("#ph_tmpl_paramGroup").tmpl({}).appendTo("#eligibilityMeasureItems").find(".paramItem:last");
          addParamItems(data.population,elemParent,elemParent);
          elemParent.parent().addClass("population");
        }

        if (!$.isEmptyObject(data.denominator)) {
          $("#eligibilityMeasureItems").append("<span class='and'>and</span>");
          addParamItems(data.denominator,$("#eligibilityMeasureItems"));
        }

        if (data.numerator) {
          addParamItems(data.numerator,$("#outcomeMeasureItems"));
        }

        if (!$.isEmptyObject(data.exclusions)) {
          addParamItems(data.exclusions,$("#exclusionMeasureItems"));
          $("#exclusionMeasureItems").hide();
          $("#exclusionPanel").show();
        }
     }

    $(document).ready(function() {
      //$.getJSON("json/bp.json",popHealth.renderMeasureJSON);
      $.getJSON("<%= measure_definition_url(@definition['id'], @definition['sub_id']) %>",popHealth.renderMeasureJSON);

      var qr = new QualityReport('<%=@definition['id']%>', '<%=@definition['sub_id']%>');
      var params = {}
      <% if (@selected_provider) %> params['npi'] = '<%= @selected_provider.npi %>';<%end%>
      qr.poll(params, popHealth.drawPctChart);

      $("#exclusionPanel h3").click(function() {
        $("#exclusionMeasureItems").slideToggle('slow');
      });
      $("#measurementPeriodEndDate").val(new Date().format("mm/dd/yyyy"));
      $(".deleteParamIcon").click(popHealth.deleteParam);
      $("#btnSaveNewMeasure").click(popHealth.saveNewMeasure);
      $("#btnReturnToDash").click(popHealth.returnToDash);

    });

  </script>
  <script type="text/html" id="ph_tmpl_paramItem">
    <div>
      <!-- ${percentage=Math.round(Math.random()*100,2)} -->
      {{if category}}<label>${category}</label>{{/if}}
      ${title}
    </div>
  </script>
  <script type="text/html" id="ph_tmpl_paramGroupContainer">
    <div class="paramGroupContainer">
    </div>
  </script>
  <script type="text/html" id="ph_tmpl_paramGroup">
    <div class="paramGroup"><div class="paramItem">
    </div></div>
  </script>
  <script type="text/html" id="ph_tmpl_data_criteria_logic">
    <div class='paramText logicLeaf' {{if id}}id='${id}'{{/if}}>
      {{if operator}}<label>${operator}</label>{{/if}}
      {{if category}}<label>${category}</label>{{/if}}{{if standard_category}}<label>${popHealth.humanizeCategory(standard_category)}</label>{{/if}}
      ${title} ${temporalText}
    </div>
  </script>
<% end %>

  <div>
    <%= render :partial => 'shared/measure_metrics', locals: {numerator: (@result ? @result['numerator'] : 0), denominator: (@result ? @result['denominator'] : 0)} %>
    <%= render :partial => 'shared/measure_title', locals: {measure: @definition, start_date: @period_start, effective_date: @effective_date }%>
    <div id="measureEditContainer">
      <div id="exclusionPanel" style="display:none;">
        <div id="exclusionMeasureItems"></div>
        <h3>exclusions <em>(<span id="exclusionCount">0</span>)</em></h3>
      </div>
      <div id="eligibilityMeasures">
        <h3>denominator <em>(<span id="eligibleCount">0</span>)</em></h3>
        <div class="measureBox">
          <div id="eligibilityMeasureItems">
          </div><!-- end #eligibilityMeasureItems -->
        </div><!-- end measureBox -->
      </div><!-- end #eligibilityMeasures -->
      <div id="outcomeMeasures">
        <h3>numerator <em>(<span id="outcomeCount">0</span>)</em></h3>
        <div class="measureBox">
          <div id="outcomeExclusionMarker" class="exclusionTab" style="display:none">
            0 Exclusions
          </div>
          <div id="outcomeMeasureItems">
          </div>
          <div id="xexclusionMeasureItems">
          </div>
        </div><!-- end measureBox -->
      </div><!-- end #outcomeMeasures -->
    </div><!-- end measureEditContainer -->
  </div>
