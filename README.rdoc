= popHealth

popHealth is a reporting tool that leverages the Laika (http://projectlaika.org/) model to allow users to create dynamic queries on population health bsed on HITSP C32 patient records.  

popHealth is a Ruby on Rails application that targets JRuby/Glassfish for deployment.

= Dependencies

* JRuby >= 1.3.1
* Sun Java >= 1.5 (1.6 required for the Glassfish gem)
* MySQL >= 5.0 or PostgreSQL >= 8.1 for popHealth DB


= End-to-end Install Instructions
Once you get a copy of the popHealth code from Gitorious (http://barrel.mitre.org/pophealth/), these are step-by-step instructions to get popHealth installed on your local machine.

== Install JRuby and Required Gems

Ensure that you have JRuby version 1.3.1 installed locally (available here: http://dist.codehaus.org/jruby/1.3.1/) and add <jruby-install>/bin to your PATH environment variable.

You will need to install Rails for JRuby, as well as the Factory Girl and Shoulda gems:

 $ jruby -S gem sources -a http://gems.github.com
 $ jruby -S gem install rails
 $ jruby -S gem install thoughtbot-factory_girl 
 $ jruby -S gem install thoughtbot-shoulda 

Install the database adapters:

  $ jruby -S gem install activerecord-jdbcmysql-adapter
  $ jruby -S gem install activerecord-jdbcpostgresql-adapter

Install the rest of the gem dependencies; from the root of your popHealth project:

 $ jruby -S rake gems:install

== Database
Make sure your local database server is running and create a new user *poplaika* with password *poplaika* and a new database/schema called *poplaika*. Find the database.yml.template file in laika/config under your local popHealth project and edit it to include your database settings, for example:

  development:
   adapter: jdbcpostgresql
   database: poplaika
   host: localhost
   port: 5432
   <<: *login

Save the file as database.yml (i.e., without .template extension). Run the database migrations and load the seed data:
  
  $ jruby -S rake db:create
  $ jruby -S rake db:schema:load
  $ jruby -S rake db:seed

== Environment
Laika uses Saxon (http://saxon.sourceforge.net/) to handle XML Schema validation and XSLT. For this to function properly, the Saxon jars must be set in a CLASSPATH environment variable. 

Navigate to the root of your popHealth project and run:

 $ source bin/laika_env.sh

As an alternative, you may create the CLASSPATH environment variable and manually set them to the Saxon jars as part of the user's profile (otherwise you will have to follow the above steps every time you open a new terminal window). 

== Running the Server
To run the application, run the following command from the root of your popHealth project.

  $ jruby script/server

Or you may use Glassfish (instructions below).
Point your browser to http://localhost:3000/. 

== GlassFish
Install the Glassfish server using the Glassfish gem:

  $ jruby -S gem install glassfish

GlassFish will use default options for the server if you do not have a glassfish.yml file in your config directory. Laika provides a glassfish.yml.template file that you may edit. Note that GlassFish cannot run as a daemon process on Windows.

Deploying Laika on the GlassFish server is very simple. Run the following command from the root of your Laika project:

  $ jruby -S glassfish

Point your browser to http://localhost:3000/. 
