= popHealth Design and Architecture

popHealth leverages the infrastructure data models from the open source EHR testing
tool Laika: http://github.com/CCHIT/laika/.
 
The classes covered in this document are grouped into three sections.
Application-specific code is the scaffolding and business logic that holds
popHealth together. Report code handles the querying logic to generate the 
quality measure reports. Patient code is responsible for reading, updating, processing, 
importing and generating C32 from patient data.

== Application-specific Code

=== Models

{ErrorMailer}:: error notification email handler
{Setting}:: run-time application configuration setting
{SystemMessage}:: news post
{User}:: application user
{UserNotifier}:: password reset notification
{UserObserver}:: user callbacks (sends notification)

=== Controllers

{AccountController}:: login, logout and registration
{ApplicationController}:: application-wide controller functionality
{NewsController}:: display and post news items
{SettingsController}:: manage run-time configuration
{UsersController}:: list and update users
{VendorsController}:: add and update vendors

==== Controller Support

* {SortOrder}

== Reports

=== Models

{Report}:: represents a quality measure report; handles PQRI representation

=== Controllers

{ReportsController}:: querying logic as well as new report/save functionality 
{PopconnectController}:: patient record import and pqri export 

== Patients

A {Patient} instance represents a single patient's medical history. Most of the
models in popHealth are part of this structure and represent different sections or
subsections of patient data. Patient and its subordinate types are based on
the C32 document standard: http://wiki.hitsp.org/docs/C32/C32-1.html

=== Patient Data Models

The following models are used to construct a complete patient record. Each
one represents a section or subsection of patient data.

{Address}:: patient address
{AdvanceDirective}:: advance directive data
{Allergy}:: patient allergy information
{Comment}:: section comment (not currently used)
{Condition}:: patient condition information
{Encounter}:: doctor visit
{Immunization}:: patient immunization
{InformationSource}:: patient info source
{InsuranceProvider}:: patient insurance provider
{InsuranceProviderGuarantor}:: ... and guarantor info
{InsuranceProviderPatient}:: ... and patient info
{InsuranceProviderSubscriber}:: ... and subscriber info
{Language}:: spoken or written language
{MedicalEquipment}:: medical device, e.g. pacemaker
{Medication}:: prescribed medication
{PatientIdentifier}:: patient affinity domain identifiers
{PersonName}:: full name
{Procedure}:: medical procedure
{Provider}:: doctor or hospital
{RegistrationInformation}:: general patient and contact info
{Result}:: medical test results (child of {AbstractResult})
{SocialHistory}:: patient social history
{Support}:: supporting contacts
{Telecom}:: phone contacts
{VitalSign}:: patient vitals (child of {AbstractResult})

==== Patient Support

* {Commentable}
* {HasC32ComponentExtension}
* {InsuranceProviderChild}
* {PatientChild}
* {PersonLike}

=== Lookup Data Models

These models represent lookup data needed for the UI and validation.

* {ActStatusCode}
* {AdvanceDirectiveStatusCode}
* {AdvanceDirectiveType}
* {AllergyStatusCode}
* {AllergyTypeCode}
* {CodeSystem}
* {ContactType}
* {CoverageRoleType}
* {EncounterLocationCode}
* {EncounterType}
* {Ethnicity}
* {Gender}
* {InsuranceType}
* {IsoCountry}
* {IsoLanguage}
* {IsoState}
* {LanguageAbilityMode}
* {LoincLabCode}
* {MaritalStatus}
* {MedicationType}
* {NoImmunizationReason}
* {ProblemType}
* {ProviderRole}
* {ProviderType}
* {Race}
* {Relationship}
* {Religion}
* {ResultTypeCode}
* {RoleClassRelationshipFormalType}
* {SeverityTerm}
* {SnowmedProblem}
* {Vaccine}
* {ZipCode}

==== Lookup Support

* {HasSelectOptionsExtension}



